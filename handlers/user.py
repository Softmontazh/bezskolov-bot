# handlers/user.py

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from fsm.request import RequestFSM, AdminFSM, PriceFSM
from database.models import PaintRequest
from database.db import async_session
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
import os
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

ADMIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É")],
        [KeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –ø—Ä–∞–π—Å–æ–º")],
        [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

USER_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

REQUEST_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

router = Router()


@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def cancel_request(message: types.Message, state: FSMContext):
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=USER_KB)
    await state.clear()


@router.message(F.text == "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
async def exit_admin(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∫–∞ –ö–∞—Ç—å üëã\n\n–ó–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤–≤–µ–¥–∏ /start", reply_markup=USER_KB
    )
    await state.clear()


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    username = message.from_user.username or message.from_user.first_name
    CREATOR_ID = os.environ.get("CREATOR_ID")
    KATYA_ID = os.environ.get("KATYA_ID")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await state.clear()

    if KATYA_ID and str(message.from_user.id) == str(KATYA_ID):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –ö–∞—Ç—é—à–∞! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
            reply_markup=ADMIN_KB,
        )
    elif CREATOR_ID and str(message.from_user.id) == str(CREATOR_ID):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –°–æ–∑–¥–∞—Ç–µ–ª—å! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
            reply_markup=ADMIN_KB,
        )
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –∑–∞–≤–æ–¥—Å–∫–æ–π –∫—Ä–∞—Å–∫–∏ –¥–ª—è —Å–∫–æ–ª–æ–≤!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=USER_KB,
        )


@router.message(RequestFSM.brand)
async def input_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–•–æ—Ä–æ—à–æ!\n–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:")
    await state.set_state(RequestFSM.model)


@router.message(RequestFSM.model)
async def input_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—Ä–∞—Å–∫–∏:")
    await state.set_state(RequestFSM.color_code)


@router.message(RequestFSM.color_code)
async def input_color_code(message: types.Message, state: FSMContext):
    await state.update_data(color_code=message.text)
    await message.answer("–•–æ—Ä–æ—à–æ!\n\n –ï—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ —É–∫–∞–∂–∏—Ç–µ –í–∞—à VIN:")
    await state.set_state(RequestFSM.vin)


@router.message(RequestFSM.vin)
async def input_vin(message: types.Message, state: FSMContext):
    await state.update_data(vin=message.text)
    await message.answer("–ü–æ–π–¥–µ—Ç!\n\n–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ:")
    await state.set_state(RequestFSM.year)


@router.message(RequestFSM.year)
async def input_year(message: types.Message, state: FSMContext):
    await state.update_data(year=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):")
    await state.set_state(RequestFSM.image)


@router.message(F.photo, RequestFSM.image)
async def input_image(message: types.Message, state: FSMContext):
    if message.photo:
        await state.update_data(image=message.photo[-1].file_id)
    else:
        await state.update_data(image=None)

    await message.answer(
        "–ü–æ–π–¥–µ—Ç!!\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    await state.set_state(RequestFSM.phone)


@router.message(F.text, RequestFSM.image)
async def skip_image(message: types.Message, state: FSMContext):
    await state.update_data(image=None)
    await message.answer(
        "–ü–æ–π–¥–µ—Ç!!\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫—É–¥–∞ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    await state.set_state(RequestFSM.phone)


@router.message(RequestFSM.phone)
async def input_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
                         "–§–∞–º–∏–ª–∏—è –ò–º—è\n"
                         "–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n"
                         "–ì–æ—Ä–æ–¥\n"
                         "–£–ª–∏—Ü–∞\n"
                         "–î–æ–º\n"
                         "–ö–≤–∞—Ä—Ç–∏—Ä–∞\n"
                         "–ò–Ω–¥–µ–∫—Å\n"
                         "–õ–ò–ë–û –ê–î–†–ï–° –ù–£–ñ–ù–û–ì–û –ü–û–ß–¢–û–í–û–ì–û –û–¢–î–ï–õ–ï–ù–ò–Ø")
    await state.set_state(RequestFSM.address)


@router.message(RequestFSM.address)
async def input_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(RequestFSM.notes)


@router.message(RequestFSM.notes)
async def input_notes(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(notes=message.text)

    data = await state.get_data()
    text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:\n"
        f"–ú–∞—Ä–∫–∞: {data['brand']}\n"
        f"–ú–æ–¥–µ–ª—å: {data['model']}\n"
        f"–ö–æ–¥ –∫—Ä–∞—Å–∫–∏: {data['color_code']}\n"
        f"VIN: {data['vin']}\n"
        f"–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {data['year']}\n"
        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if data.get('image') else '–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ'}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–ó–∞–º–µ—Ç–∫–∏: {data['notes']}"
    )
    confirm_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_yes"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_no"),
            ]
        ]
    )
    await message.answer(text + "\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=confirm_kb)
    await state.set_state(RequestFSM.confirm)


@router.callback_query(F.data == "confirm_yes", RequestFSM.confirm)
async def confirm_yes(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()

    data = await state.get_data()
    async with async_session() as session:
        request = PaintRequest(
            user_id=callback.from_user.id,
            brand=data["brand"],
            model=data["model"],
            color_code=data["color_code"],
            vin=data["vin"],
            year=data.get("year"),
            image_id=data.get("image"),
            phone_number=data["phone_number"],
            address=data["address"],
            notes=data["notes"],
        )
        session.add(request)
        await session.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    KATYA_ID = os.environ.get("KATYA_ID")
    if KATYA_ID:
        try:
            notification_text = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{callback.from_user.username or callback.from_user.id}\n\n"
                f"üöó –ú–∞—Ä–∫–∞: {data['brand']}\n"
                f"üìã –ú–æ–¥–µ–ª—å: {data['model']}\n"
                f"üé® –ö–æ–¥ –∫—Ä–∞—Å–∫–∏: {data['color_code']}\n"
                f"üî¢ VIN: {data['vin']}\n"
                f"üìÖ –ì–æ–¥: {data.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone_number']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
                f"üìù –ó–∞–º–µ—Ç–∫–∏: {data['notes']}"
            )

            if data.get("image"):
                await bot.send_photo(
                    int(KATYA_ID), photo=data["image"], caption=notification_text
                )
            else:
                await bot.send_message(int(KATYA_ID), notification_text)

        except TelegramBadRequest:
            # –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            pass
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    await callback.message.edit_text(
        "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=None,
    )
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè", reply_markup=USER_KB)
    await state.clear()


@router.callback_query(F.data == "confirm_no", RequestFSM.confirm)
async def confirm_no(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=None,
    )
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=USER_KB)
    await state.clear()


# –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(F.text == "–í—Å–µ –∑–∞—è–≤–∫–∏")
async def show_all_requests(message: types.Message, state: FSMContext):
    CREATOR_ID = os.environ.get("CREATOR_ID")
    KATYA_ID = os.environ.get("KATYA_ID")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if not (
        str(message.from_user.id) == str(KATYA_ID)
        or str(message.from_user.id) == str(CREATOR_ID)
    ):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    async with async_session() as session:
        result = await session.execute(
            select(PaintRequest).order_by(PaintRequest.created_at.desc())
        )
        requests = result.scalars().all()

    if not requests:
        await message.answer("üìã –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=ADMIN_KB)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫
    for request in requests[:10]:
        status_emoji = {
            "pending": "üü°",
            "in_progress": "üîµ",
            "completed": "üü¢",
            "cancelled": "üî¥",
        }.get(request.status, "‚ö™")

        text = (
            f"{status_emoji} –ó–∞—è–≤–∫–∞ #{request.id}\n"
            f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.user_id}\n"
            f"üöó {request.brand} {request.model}\n"
            f"üé® –ö–æ–¥ –∫—Ä–∞—Å–∫–∏: {request.color_code}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone_number}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {request.status}"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ÔøΩ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
                        callback_data=f"status_pending_{request.id}",
                    ),
                    InlineKeyboardButton(
                        text="ÔøΩ –í —Ä–∞–±–æ—Ç–µ",
                        callback_data=f"status_in_progress_{request.id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                        callback_data=f"status_completed_{request.id}",
                    ),
                    InlineKeyboardButton(
                        text="üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ",
                        callback_data=f"status_cancelled_{request.id}",
                    ),
                ],
            ]
        )

        if request.image_id:
            await message.answer_photo(
                photo=request.image_id, caption=text, reply_markup=status_kb
            )
        else:
            await message.answer(text, reply_markup=status_kb)

    if len(requests) > 10:
        await message.answer(
            f"–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(requests)} –∑–∞—è–≤–æ–∫.", reply_markup=ADMIN_KB
        )
    else:
        await message.answer("–≠—Ç–æ –≤—Å–µ –∑–∞—è–≤–∫–∏.", reply_markup=ADMIN_KB)


@router.message(F.text == "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É")
async def search_by_phone_start(message: types.Message, state: FSMContext):
    CREATOR_ID = os.environ.get("CREATOR_ID")
    KATYA_ID = os.environ.get("KATYA_ID")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if not (
        str(message.from_user.id) == str(KATYA_ID)
        or str(message.from_user.id) == str(CREATOR_ID)
    ):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminFSM.search_phone)


@router.message(AdminFSM.search_phone)
async def search_by_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()

    async with async_session() as session:
        result = await session.execute(
            select(PaintRequest)
            .where(PaintRequest.phone_number.contains(phone))
            .order_by(PaintRequest.created_at.desc())
        )
        requests = result.scalars().all()

    if not requests:
        await message.answer(
            f"üìû –ó–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º '{phone}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=ADMIN_KB
        )
        await state.clear()
        return

    await message.answer(f"üìû –ù–∞–π–¥–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º '{phone}':")

    for request in requests:
        status_emoji = {
            "pending": "üü°",
            "in_progress": "üîµ",
            "completed": "üü¢",
            "cancelled": "üî¥",
        }.get(request.status, "‚ö™")

        text = (
            f"{status_emoji} –ó–∞—è–≤–∫–∞ #{request.id}\n"
            f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.user_id}\n"
            f"üöó {request.brand} {request.model}\n"
            f"üé® –ö–æ–¥ –∫—Ä–∞—Å–∫–∏: {request.color_code}\n"
            f"üî¢ VIN: {request.vin or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ –ì–æ–¥: {request.year or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone_number}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"
            f"üìù –ó–∞–º–µ—Ç–∫–∏: {request.notes or '–ù–µ—Ç'}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {request.status}"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ÔøΩ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
                        callback_data=f"status_pending_{request.id}",
                    ),
                    InlineKeyboardButton(
                        text="ÔøΩ –í —Ä–∞–±–æ—Ç–µ",
                        callback_data=f"status_in_progress_{request.id}",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                        callback_data=f"status_completed_{request.id}",
                    ),
                    InlineKeyboardButton(
                        text="üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ",
                        callback_data=f"status_cancelled_{request.id}",
                    ),
                ],
            ]
        )

        if request.image_id:
            await message.answer_photo(
                photo=request.image_id, caption=text, reply_markup=status_kb
            )
        else:
            await message.answer(text, reply_markup=status_kb)

    await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=ADMIN_KB)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("status_"))
async def change_request_status(callback: types.CallbackQuery, bot: Bot):
    data_parts = callback.data.split("_")
    new_status = data_parts[1]
    request_id = int(data_parts[2])

    async with async_session() as session:
        result = await session.execute(
            select(PaintRequest).where(PaintRequest.id == request_id)
        )
        request = result.scalar_one_or_none()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        old_status = request.status
        request.status = new_status
        await session.commit()

    status_names = {
        "pending": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
        "completed": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ",
    }

    await callback.answer(
        f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω: {status_names[old_status]} ‚Üí {status_names[new_status]}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    try:
        status_messages = {
            "in_progress": f"üîµ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n\n–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ {request.brand} {request.model}.",
            "completed": f"üü¢ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n–ö—Ä–∞—Å–∫–∞ {request.brand} {request.model} –≥–æ—Ç–æ–≤–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            "cancelled": f"üî¥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        }
        
        if new_status in status_messages:
            await bot.send_message(
                request.user_id,
                status_messages[new_status]
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    status_emoji = {
        "pending": "üü°",
        "in_progress": "üîµ",
        "completed": "üü¢",
        "cancelled": "üî¥",
    }.get(new_status, "‚ö™")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    current_text = (
        callback.message.caption if callback.message.photo else callback.message.text
    )
    lines = current_text.split("\n")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    for i, line in enumerate(lines):
        if line.startswith("üìä –°—Ç–∞—Ç—É—Å:"):
            lines[i] = f"üìä –°—Ç–∞—Ç—É—Å: {new_status}"
            break

    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    lines[0] = f"{status_emoji} –ó–∞—è–≤–∫–∞ #{request_id}"

    updated_text = "\n".join(lines)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    status_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="ÔøΩ –í –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data=f"status_pending_{request_id}"
                ),
                InlineKeyboardButton(
                    text="ÔøΩ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_in_progress_{request_id}"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"status_completed_{request_id}"
                ),
                InlineKeyboardButton(
                    text="üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ", callback_data=f"status_cancelled_{request_id}"
                ),
            ],
        ]
    )

    try:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption=updated_text, reply_markup=status_kb
            )
        else:
            await callback.message.edit_text(text=updated_text, reply_markup=status_kb)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


@router.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_new_request(message: types.Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –ø–æ –ø–æ–∏—Å–∫—É –∏ –ø–æ–¥–±–æ—Ä—É –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ:",
        reply_markup=REQUEST_KB,
    )
    await state.set_state(RequestFSM.brand)


@router.message(F.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_requests(message: types.Message):
    user_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(PaintRequest)
            .where(PaintRequest.user_id == user_id)
            .order_by(PaintRequest.created_at.desc())
        )
        requests = result.scalars().all()

    if not requests:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=USER_KB)
        return

    await message.answer(f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ ({len(requests)}):")

    for request in requests:
        status_emoji = {
            "pending": "üü° –í –æ–∂–∏–¥–∞–Ω–∏–∏",
            "in_progress": "üîµ –í —Ä–∞–±–æ—Ç–µ",
            "completed": "üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            "cancelled": "üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ",
        }.get(request.status, "‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{request.id}\n"
            f"üöó {request.brand} {request.model}\n"
            f"üé® –ö–æ–¥ –∫—Ä–∞—Å–∫–∏: {request.color_code}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone_number}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji}"
        )

        await message.answer(text)

    await message.answer("–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏.", reply_markup=USER_KB)
