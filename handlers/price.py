# handlers/price.py

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from fsm.request import PriceFSM
from database.models import Price
from database.db import async_session
from aiogram.exceptions import TelegramBadRequest
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

router = Router()


async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    CREATOR_ID = os.environ.get("CREATOR_ID")
    KATYA_ID = os.environ.get("KATYA_ID")
    return str(user_id) == str(KATYA_ID) or str(user_id) == str(CREATOR_ID)


@router.message(F.text == "–†–∞–±–æ—Ç–∞ —Å –ø—Ä–∞–π—Å–æ–º")
async def show_price_list(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    async with async_session() as session:
        result = await session.execute(select(Price).order_by(Price.id))
        prices = result.scalars().all()

    if not prices:
        await message.answer(
            "üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø—É—Å—Ç.", 
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_price_item")]
                ]
            )
        )
        return

    await message.answer("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º:")
    
    for price in prices:
        price_text = (
            f"üì¶ {price.title}\n"
            f"üí∞ –¶–µ–Ω–∞: {price.price // 100}.{price.price % 100:02d} —Ç–≥.\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {price.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_price_{price.id}"),
                    InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_price_{price.id}")
                ]
            ]
        )
        
        await message.answer(price_text, reply_markup=kb)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_price_item")]
            ]
        )
    )


@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å")
async def show_price_for_users(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with async_session() as session:
        result = await session.execute(select(Price).order_by(Price.id))
        prices = result.scalars().all()

    if not prices:
        await message.answer("üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    price_text = "üí∞ **–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ª—É–≥:**\n\n"
    
    for i, price in enumerate(prices, 1):
        price_text += (
            f"**{i}. {price.title}**\n"
            f"üí∞ –¶–µ–Ω–∞: {price.price // 100}.{price.price % 100:02d} —Ç–≥.\n"
        )
        if price.description:
            price_text += f"üìù {price.description}\n"
        price_text += "\n"
    
    price_text += "üìû –î–ª—è –∑–∞–∫–∞–∑–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É!"
    
    await message.answer(price_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–π—Å–æ–º
@router.callback_query(F.data == "add_price_item")
async def add_price_item_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await callback.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
    await state.set_state(PriceFSM.add_title)


@router.message(PriceFSM.add_title)
async def add_price_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(PriceFSM.add_description)


@router.message(PriceFSM.add_description)
async def add_price_description(message: types.Message, state: FSMContext):
    description = None if message.text == "-" else message.text
    await state.update_data(description=description)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ç–µ–Ω–≥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50):")
    await state.set_state(PriceFSM.add_price)


@router.message(PriceFSM.add_price)
async def add_price_amount(message: types.Message, state: FSMContext):
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–Ω–≥–µ –≤ —Ç–∏—ã–Ω
        price_rubles = float(message.text.replace(",", "."))
        price_kopecks = int(price_rubles * 100)
        
        if price_kopecks <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            new_price = Price(
                title=data["title"],
                description=data["description"],
                price=price_kopecks
            )
            session.add(new_price)
            await session.commit()
        
        await message.answer(
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üì¶ {data['title']}\n"
            f"üí∞ –¶–µ–Ω–∞: {price_kopecks // 100}.{price_kopecks % 100:02d} —Ç–≥.\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50):")


@router.callback_query(F.data.startswith("edit_price_"))
async def edit_price_start(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    price_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        result = await session.execute(select(Price).where(Price.id == price_id))
        price = result.scalar_one_or_none()
        
        if not price:
            await callback.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
    
    await state.update_data(editing_price_id=price_id)
    
    edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{price_id}")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{price_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_amount_{price_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ]
    )
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {price.title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_kb
    )


@router.callback_query(F.data.startswith("edit_title_"))
async def edit_title_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
    await state.set_state(PriceFSM.edit_title)


@router.message(PriceFSM.edit_title)
async def edit_title_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    price_id = data["editing_price_id"]
    
    async with async_session() as session:
        result = await session.execute(select(Price).where(Price.id == price_id))
        price = result.scalar_one_or_none()
        
        if price:
            price.title = message.text
            await session.commit()
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}")
        else:
            await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_desc_"))
async def edit_description_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):")
    await state.set_state(PriceFSM.edit_description)


@router.message(PriceFSM.edit_description)
async def edit_description_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    price_id = data["editing_price_id"]
    description = None if message.text == "-" else message.text
    
    async with async_session() as session:
        result = await session.execute(select(Price).where(Price.id == price_id))
        price = result.scalar_one_or_none()
        
        if price:
            price.description = description
            await session.commit()
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        else:
            await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_amount_"))
async def edit_amount_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ç–µ–Ω–≥–µ:")
    await state.set_state(PriceFSM.edit_price)


@router.message(PriceFSM.edit_price)
async def edit_amount_finish(message: types.Message, state: FSMContext):
    try:
        price_rubles = float(message.text.replace(",", "."))
        price_kopecks = int(price_rubles * 100)
        
        if price_kopecks <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        price_id = data["editing_price_id"]
        
        async with async_session() as session:
            result = await session.execute(select(Price).where(Price.id == price_id))
            price = result.scalar_one_or_none()
            
            if price:
                price.price = price_kopecks
                await session.commit()
                await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {price_kopecks // 100}.{price_kopecks % 100:02d} —Ç–≥.")
            else:
                await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.callback_query(F.data.startswith("delete_price_"))
async def delete_price_confirm(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    price_id = int(callback.data.split("_")[2])
    
    confirm_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{price_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            ]
        ]
    )
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é?",
        reply_markup=confirm_kb
    )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_price_execute(callback: types.CallbackQuery):
    price_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        result = await session.execute(select(Price).where(Price.id == price_id))
        price = result.scalar_one_or_none()
        
        if price:
            title = price.title
            await session.delete(price)
            await session.commit()
            await callback.message.edit_text(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{title}' —É–¥–∞–ª–µ–Ω–∞")
        else:
            await callback.message.edit_text("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@router.callback_query(F.data.in_(["cancel_edit", "cancel_delete"]))
async def cancel_operation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
