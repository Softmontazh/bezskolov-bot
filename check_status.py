#!/usr/bin/env python3
# check_status.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞

import asyncio
import sys
import os
from pathlib import Path


async def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        import main

        print("  ‚úÖ main.py")

        from handlers import user, price

        print("  ‚úÖ handlers.user")
        print("  ‚úÖ handlers.price")

        from database import db, models

        print("  ‚úÖ database.db")
        print("  ‚úÖ database.models")

        from fsm import request

        print("  ‚úÖ fsm.request")

        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


async def check_env_template():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–∞ .env"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    env_example = Path(".env.example")
    if env_example.exists():
        print("  ‚úÖ .env.example —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        with open(env_example, "r", encoding="utf-8") as f:
            content = f.read()
            required_vars = ["BOT_TOKEN", "CREATOR_ID", "KATYA_ID"]
            for var in required_vars:
                if var in content:
                    print(f"    ‚úÖ {var}")
                else:
                    print(f"    ‚ùå {var} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print("  ‚ùå .env.example –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


async def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from database.db import init_db, async_session
        from database.models import PaintRequest, Price
        from sqlalchemy import select

        await init_db()
        print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            result = await session.execute(select(PaintRequest))
            requests_count = len(result.scalars().all())
            print(f"  üìä –ó–∞—è–≤–æ–∫ –≤ –ë–î: {requests_count}")

            result = await session.execute(select(Price))
            prices_count = len(result.scalars().all())
            print(f"  üí∞ –ü–æ–∑–∏—Ü–∏–π –≤ –ø—Ä–∞–π—Å–µ: {prices_count}")

        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False


async def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")

    required_files = [
        "main.py",
        "config.py",
        "requirements.txt",
        "README.md",
        "CHANGELOG.md",
        "DEPLOYMENT.md",
        "LICENSE",
        ".env.example",
        ".gitignore",
        "handlers/__init__.py",
        "handlers/user.py",
        "handlers/price.py",
        "database/db.py",
        "database/models.py",
        "fsm/request.py",
    ]

    for file_path in required_files:
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path}")


async def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ BezSkolov Bot\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    imports_ok = await check_imports()
    await check_env_template()
    db_ok = await check_database()
    await check_file_structure()

    print("\n" + "=" * 50)
    if imports_ok and db_ok:
        print("üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        print("   2. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ ID")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
        print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ TESTING_PRICE.md")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
